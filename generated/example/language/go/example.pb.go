// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: example.proto

package proto

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/googleapis/google/api"
	rpc "github.com/gogo/googleapis/google/rpc"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strconv "strconv"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Partner_PhoneType int32

const (
	MOBILE Partner_PhoneType = 0
	HOME   Partner_PhoneType = 1
	WORK   Partner_PhoneType = 2
)

var Partner_PhoneType_name = map[int32]string{
	0: "MOBILE",
	1: "HOME",
	2: "WORK",
}

var Partner_PhoneType_value = map[string]int32{
	"MOBILE": 0,
	"HOME":   1,
	"WORK":   2,
}

func (Partner_PhoneType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0, 0}
}

type Partner struct {
	Name  string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name" pg:",notnull"`
	Id    int32                  `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	Email string                 `protobuf:"bytes,3,opt,name=email,proto3" json:"email,omitempty"`
	Sss   *rpc.Status            `protobuf:"bytes,5,opt,name=sss,proto3" json:"sss,omitempty"`
	Phone []*Partner_PhoneNumber `protobuf:"bytes,4,rep,name=phone,proto3" json:"phone,omitempty"`
}

func (m *Partner) Reset()      { *m = Partner{} }
func (*Partner) ProtoMessage() {}
func (*Partner) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0}
}
func (m *Partner) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Partner) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Partner.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Partner) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partner.Merge(m, src)
}
func (m *Partner) XXX_Size() int {
	return m.Size()
}
func (m *Partner) XXX_DiscardUnknown() {
	xxx_messageInfo_Partner.DiscardUnknown(m)
}

var xxx_messageInfo_Partner proto.InternalMessageInfo

func (m *Partner) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Partner) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Partner) GetEmail() string {
	if m != nil {
		return m.Email
	}
	return ""
}

func (m *Partner) GetSss() *rpc.Status {
	if m != nil {
		return m.Sss
	}
	return nil
}

func (m *Partner) GetPhone() []*Partner_PhoneNumber {
	if m != nil {
		return m.Phone
	}
	return nil
}

type Partner_PhoneNumber struct {
	Number string            `protobuf:"bytes,1,opt,name=number,proto3" json:"number,omitempty"`
	Type   Partner_PhoneType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.Partner_PhoneType" json:"type,omitempty"`
}

func (m *Partner_PhoneNumber) Reset()      { *m = Partner_PhoneNumber{} }
func (*Partner_PhoneNumber) ProtoMessage() {}
func (*Partner_PhoneNumber) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{0, 0}
}
func (m *Partner_PhoneNumber) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Partner_PhoneNumber) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Partner_PhoneNumber.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Partner_PhoneNumber) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Partner_PhoneNumber.Merge(m, src)
}
func (m *Partner_PhoneNumber) XXX_Size() int {
	return m.Size()
}
func (m *Partner_PhoneNumber) XXX_DiscardUnknown() {
	xxx_messageInfo_Partner_PhoneNumber.DiscardUnknown(m)
}

var xxx_messageInfo_Partner_PhoneNumber proto.InternalMessageInfo

func (m *Partner_PhoneNumber) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

func (m *Partner_PhoneNumber) GetType() Partner_PhoneType {
	if m != nil {
		return m.Type
	}
	return MOBILE
}

type PartnerList struct {
	Partners []*Partner `protobuf:"bytes,1,rep,name=partners,proto3" json:"partners,omitempty"`
}

func (m *PartnerList) Reset()      { *m = PartnerList{} }
func (*PartnerList) ProtoMessage() {}
func (*PartnerList) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{1}
}
func (m *PartnerList) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PartnerList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PartnerList.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PartnerList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PartnerList.Merge(m, src)
}
func (m *PartnerList) XXX_Size() int {
	return m.Size()
}
func (m *PartnerList) XXX_DiscardUnknown() {
	xxx_messageInfo_PartnerList.DiscardUnknown(m)
}

var xxx_messageInfo_PartnerList proto.InternalMessageInfo

func (m *PartnerList) GetPartners() []*Partner {
	if m != nil {
		return m.Partners
	}
	return nil
}

type AddPartnerReply struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *AddPartnerReply) Reset()      { *m = AddPartnerReply{} }
func (*AddPartnerReply) ProtoMessage() {}
func (*AddPartnerReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{2}
}
func (m *AddPartnerReply) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AddPartnerReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AddPartnerReply.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AddPartnerReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AddPartnerReply.Merge(m, src)
}
func (m *AddPartnerReply) XXX_Size() int {
	return m.Size()
}
func (m *AddPartnerReply) XXX_DiscardUnknown() {
	xxx_messageInfo_AddPartnerReply.DiscardUnknown(m)
}

var xxx_messageInfo_AddPartnerReply proto.InternalMessageInfo

func (m *AddPartnerReply) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

type SearchRequest struct {
	SearchString string `protobuf:"bytes,1,opt,name=search_string,json=searchString,proto3" json:"search_string,omitempty"`
}

func (m *SearchRequest) Reset()      { *m = SearchRequest{} }
func (*SearchRequest) ProtoMessage() {}
func (*SearchRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_15a1dc8d40dadaa6, []int{3}
}
func (m *SearchRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SearchRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SearchRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SearchRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SearchRequest.Merge(m, src)
}
func (m *SearchRequest) XXX_Size() int {
	return m.Size()
}
func (m *SearchRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SearchRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SearchRequest proto.InternalMessageInfo

func (m *SearchRequest) GetSearchString() string {
	if m != nil {
		return m.SearchString
	}
	return ""
}

func init() {
	proto.RegisterEnum("proto.Partner_PhoneType", Partner_PhoneType_name, Partner_PhoneType_value)
	proto.RegisterType((*Partner)(nil), "proto.Partner")
	proto.RegisterType((*Partner_PhoneNumber)(nil), "proto.Partner.PhoneNumber")
	proto.RegisterType((*PartnerList)(nil), "proto.PartnerList")
	proto.RegisterType((*AddPartnerReply)(nil), "proto.AddPartnerReply")
	proto.RegisterType((*SearchRequest)(nil), "proto.SearchRequest")
}

func init() { proto.RegisterFile("example.proto", fileDescriptor_15a1dc8d40dadaa6) }

var fileDescriptor_15a1dc8d40dadaa6 = []byte{
	// 786 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xbc, 0x53, 0x41, 0x6f, 0x1b, 0x45,
	0x14, 0xde, 0xb5, 0x63, 0x37, 0x79, 0xc6, 0x21, 0x8c, 0xa2, 0xc8, 0xec, 0x61, 0xbb, 0x5a, 0x38,
	0x58, 0x6d, 0xbd, 0x9b, 0xba, 0x01, 0x44, 0xe1, 0xd0, 0x04, 0x45, 0x6d, 0x20, 0x69, 0xa2, 0x35,
	0x12, 0x47, 0x34, 0x5e, 0x3f, 0x76, 0x57, 0xf2, 0xce, 0x0c, 0x33, 0xb3, 0x4d, 0xf7, 0x06, 0xfc,
	0x02, 0x04, 0x27, 0xfe, 0x01, 0x27, 0xce, 0xfc, 0x04, 0x8e, 0x41, 0x5c, 0x7a, 0xaa, 0x88, 0xc3,
	0x01, 0x71, 0xaa, 0xf8, 0x05, 0xc8, 0xb3, 0xeb, 0x92, 0x44, 0x91, 0xda, 0x53, 0x4e, 0x7e, 0xdf,
	0x37, 0xef, 0x7d, 0xdf, 0x37, 0xeb, 0x79, 0xd0, 0xc5, 0xa7, 0x34, 0x17, 0x53, 0x0c, 0x84, 0xe4,
	0x9a, 0x93, 0x96, 0xf9, 0x71, 0x06, 0x49, 0xa6, 0xd3, 0x62, 0x1c, 0xc4, 0x3c, 0x0f, 0x13, 0x9e,
	0xf0, 0xd0, 0xd0, 0xe3, 0xe2, 0x2b, 0x83, 0x0c, 0x30, 0x55, 0x35, 0xe5, 0x7c, 0x70, 0xb9, 0x3d,
	0xe1, 0x3c, 0x99, 0x22, 0x15, 0x99, 0xaa, 0xcb, 0x90, 0x8a, 0x2c, 0xa4, 0x8c, 0x71, 0x4d, 0x75,
	0xc6, 0x99, 0xaa, 0x07, 0x47, 0xe7, 0x07, 0xa5, 0x88, 0x07, 0x18, 0x73, 0x55, 0x2a, 0x8d, 0x35,
	0x4c, 0xa8, 0xc6, 0x63, 0x5a, 0x56, 0xf6, 0xf1, 0x20, 0x41, 0x36, 0x50, 0xc7, 0x34, 0x49, 0x50,
	0x86, 0x5c, 0x18, 0xa1, 0x2b, 0x44, 0x87, 0xaf, 0x4e, 0x23, 0x45, 0x1c, 0x2a, 0x4d, 0x75, 0x51,
	0xcf, 0xf8, 0xbf, 0x36, 0xe0, 0xc6, 0x11, 0x95, 0x9a, 0xa1, 0x24, 0x03, 0x58, 0x62, 0x34, 0xc7,
	0x9e, 0xed, 0xd9, 0xfd, 0x95, 0x9d, 0xb7, 0xff, 0x79, 0x7e, 0xd3, 0xe0, 0x7f, 0x9f, 0xdf, 0xec,
	0x8a, 0xe4, 0xbe, 0x7f, 0x87, 0x71, 0xcd, 0x8a, 0xe9, 0xd4, 0x8f, 0x0c, 0x4d, 0x56, 0xa1, 0x91,
	0x4d, 0x7a, 0x0d, 0xcf, 0xee, 0xb7, 0xa2, 0x46, 0x36, 0x21, 0xeb, 0xd0, 0xc2, 0x9c, 0x66, 0xd3,
	0x5e, 0x73, 0x3e, 0x1f, 0x55, 0x80, 0xbc, 0x0b, 0x4d, 0xa5, 0x54, 0xaf, 0xe5, 0xd9, 0xfd, 0xce,
	0x90, 0x04, 0x55, 0x8e, 0x40, 0x8a, 0x38, 0x18, 0x99, 0x1c, 0xd1, 0xfc, 0x98, 0x6c, 0x42, 0x4b,
	0xa4, 0x9c, 0x61, 0x6f, 0xc9, 0x6b, 0xf6, 0x3b, 0x43, 0xa7, 0x4a, 0x17, 0xd4, 0xc9, 0x82, 0xa3,
	0xf9, 0xd9, 0xe3, 0x22, 0x1f, 0xa3, 0x8c, 0xaa, 0x46, 0x67, 0x04, 0x9d, 0x73, 0x2c, 0xd9, 0x80,
	0x36, 0x33, 0x55, 0x95, 0x3e, 0xaa, 0x11, 0xb9, 0x03, 0x4b, 0xba, 0x14, 0x68, 0x62, 0xae, 0x0e,
	0x7b, 0x57, 0xe9, 0x7e, 0x5e, 0x0a, 0x8c, 0x4c, 0x97, 0x7f, 0x1b, 0x56, 0x5e, 0x52, 0x04, 0xa0,
	0x7d, 0x70, 0xb8, 0xb3, 0xb7, 0xbf, 0xbb, 0x66, 0x91, 0x65, 0x58, 0x7a, 0x74, 0x78, 0xb0, 0xbb,
	0x66, 0xcf, 0xab, 0x2f, 0x0e, 0xa3, 0xcf, 0xd6, 0x1a, 0xfe, 0x87, 0xd0, 0xa9, 0x75, 0xf6, 0x33,
	0xa5, 0xc9, 0x2d, 0x58, 0x16, 0x15, 0x54, 0x3d, 0xdb, 0xdc, 0x62, 0xf5, 0xa2, 0x5b, 0xf4, 0xf2,
	0xdc, 0xbf, 0x0d, 0x6f, 0x6e, 0x4f, 0x26, 0x0b, 0x1e, 0xc5, 0xb4, 0x24, 0x3d, 0xb8, 0x91, 0xa3,
	0x52, 0x34, 0xa9, 0xbf, 0x7f, 0xb4, 0x80, 0xfe, 0x16, 0x74, 0x47, 0x48, 0x65, 0x9c, 0x46, 0xf8,
	0x75, 0x81, 0x4a, 0x93, 0x77, 0xa0, 0xab, 0x0c, 0xf1, 0xa5, 0xd2, 0x32, 0x63, 0x49, 0x3d, 0xf0,
	0x46, 0x45, 0x8e, 0x0c, 0x37, 0xfc, 0xdd, 0x86, 0xd5, 0xda, 0x60, 0x84, 0xf2, 0x49, 0x16, 0x23,
	0x79, 0x1f, 0xe0, 0x7f, 0x57, 0x72, 0x29, 0x9d, 0xb3, 0x51, 0xe3, 0x4b, 0xc1, 0x7c, 0x8b, 0x7c,
	0x0a, 0x9d, 0x87, 0xa8, 0x6b, 0x52, 0x91, 0xf5, 0xba, 0xf1, 0x42, 0x28, 0x87, 0x5c, 0x94, 0x9b,
	0x7f, 0x12, 0xff, 0xad, 0xef, 0xfe, 0xf8, 0xeb, 0xc7, 0x46, 0x87, 0xac, 0x84, 0x8b, 0x9b, 0x93,
	0x8f, 0x16, 0x97, 0x59, 0xc4, 0x78, 0x7d, 0x35, 0x6b, 0xe7, 0xdb, 0xf6, 0x0f, 0xdb, 0xbf, 0xb4,
	0xc8, 0x4f, 0x36, 0xb4, 0x0f, 0x4a, 0x6f, 0xfb, 0x68, 0xcf, 0x7f, 0x00, 0x8d, 0x1c, 0x49, 0x3f,
	0xd5, 0x5a, 0xa8, 0xfb, 0x61, 0x78, 0x6e, 0x01, 0x14, 0x32, 0x7c, 0x9a, 0x85, 0x09, 0x1f, 0x18,
	0xa5, 0x41, 0x9e, 0xc5, 0x92, 0x3b, 0x6b, 0x8c, 0x33, 0x7c, 0xb0, 0x58, 0xfd, 0x98, 0xe7, 0xb7,
	0x1e, 0xc1, 0xf2, 0xb6, 0xa0, 0x71, 0x8a, 0xde, 0x90, 0x7c, 0xfc, 0xba, 0x3a, 0xe1, 0x78, 0xca,
	0xc7, 0x61, 0x4e, 0x95, 0x46, 0x19, 0xee, 0xef, 0x7d, 0xb2, 0xfb, 0x78, 0xb4, 0x3b, 0x6c, 0xde,
	0x0d, 0x36, 0xa3, 0x14, 0x9a, 0x5b, 0x9b, 0x9b, 0x84, 0xc2, 0xc3, 0x08, 0x75, 0x21, 0x19, 0x4e,
	0xbc, 0xe3, 0x14, 0x99, 0xa7, 0x53, 0xf4, 0x0a, 0x85, 0xd2, 0x9b, 0x70, 0x54, 0x1e, 0xe3, 0xda,
	0x4b, 0xe9, 0x13, 0xf4, 0x04, 0xca, 0x3c, 0x53, 0x2a, 0xe3, 0xcc, 0xd3, 0xdc, 0xa3, 0x71, 0x8c,
	0x4a, 0x99, 0x5e, 0x89, 0x8a, 0x17, 0x32, 0xc6, 0x80, 0x6c, 0xc0, 0xba, 0x73, 0xd5, 0xde, 0x18,
	0xa7, 0xbb, 0xd7, 0xe6, 0x74, 0xef, 0xda, 0x9c, 0xb6, 0xae, 0xc9, 0xe9, 0xbd, 0x6b, 0xf9, 0x9f,
	0x4e, 0x4e, 0x5d, 0xeb, 0xd9, 0xa9, 0x6b, 0xbd, 0x38, 0x75, 0xed, 0x6f, 0x66, 0xae, 0xfd, 0xf3,
	0xcc, 0xb5, 0x7f, 0x9b, 0xb9, 0xf6, 0xc9, 0xcc, 0xb5, 0xff, 0x9c, 0xb9, 0xf6, 0xdf, 0x33, 0xd7,
	0x7a, 0x31, 0x73, 0xed, 0xef, 0xcf, 0x5c, 0xeb, 0xe4, 0xcc, 0xb5, 0x9e, 0x9d, 0xb9, 0x16, 0x40,
	0x5e, 0xce, 0x1f, 0x9f, 0xa0, 0xac, 0xdc, 0xe9, 0xd6, 0x3b, 0x70, 0x34, 0x7f, 0x7e, 0x6a, 0xdc,
	0x36, 0xcf, 0xf0, 0xde, 0x7f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x67, 0x1f, 0x48, 0x68, 0xc0, 0x06,
	0x00, 0x00,
}

func (x Partner_PhoneType) String() string {
	s, ok := Partner_PhoneType_name[int32(x)]
	if ok {
		return s
	}
	return strconv.Itoa(int(x))
}
func (this *Partner) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Partner)
	if !ok {
		that2, ok := that.(Partner)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Name != that1.Name {
		return false
	}
	if this.Id != that1.Id {
		return false
	}
	if this.Email != that1.Email {
		return false
	}
	if !this.Sss.Equal(that1.Sss) {
		return false
	}
	if len(this.Phone) != len(that1.Phone) {
		return false
	}
	for i := range this.Phone {
		if !this.Phone[i].Equal(that1.Phone[i]) {
			return false
		}
	}
	return true
}
func (this *Partner_PhoneNumber) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Partner_PhoneNumber)
	if !ok {
		that2, ok := that.(Partner_PhoneNumber)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Number != that1.Number {
		return false
	}
	if this.Type != that1.Type {
		return false
	}
	return true
}
func (this *PartnerList) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*PartnerList)
	if !ok {
		that2, ok := that.(PartnerList)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if len(this.Partners) != len(that1.Partners) {
		return false
	}
	for i := range this.Partners {
		if !this.Partners[i].Equal(that1.Partners[i]) {
			return false
		}
	}
	return true
}
func (this *AddPartnerReply) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*AddPartnerReply)
	if !ok {
		that2, ok := that.(AddPartnerReply)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Message != that1.Message {
		return false
	}
	return true
}
func (this *SearchRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*SearchRequest)
	if !ok {
		that2, ok := that.(SearchRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.SearchString != that1.SearchString {
		return false
	}
	return true
}
func (this *Partner) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 9)
	s = append(s, "&proto.Partner{")
	s = append(s, "Name: "+fmt.Sprintf("%#v", this.Name)+",\n")
	s = append(s, "Id: "+fmt.Sprintf("%#v", this.Id)+",\n")
	s = append(s, "Email: "+fmt.Sprintf("%#v", this.Email)+",\n")
	if this.Sss != nil {
		s = append(s, "Sss: "+fmt.Sprintf("%#v", this.Sss)+",\n")
	}
	if this.Phone != nil {
		s = append(s, "Phone: "+fmt.Sprintf("%#v", this.Phone)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Partner_PhoneNumber) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 6)
	s = append(s, "&proto.Partner_PhoneNumber{")
	s = append(s, "Number: "+fmt.Sprintf("%#v", this.Number)+",\n")
	s = append(s, "Type: "+fmt.Sprintf("%#v", this.Type)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *PartnerList) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.PartnerList{")
	if this.Partners != nil {
		s = append(s, "Partners: "+fmt.Sprintf("%#v", this.Partners)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *AddPartnerReply) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.AddPartnerReply{")
	s = append(s, "Message: "+fmt.Sprintf("%#v", this.Message)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *SearchRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&proto.SearchRequest{")
	s = append(s, "SearchString: "+fmt.Sprintf("%#v", this.SearchString)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringExample(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PartnerServiceClient is the client API for PartnerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PartnerServiceClient interface {
	AddPartner(ctx context.Context, in *Partner, opts ...grpc.CallOption) (*AddPartnerReply, error)
	GetPartners(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PartnerList, error)
	SearchPartner(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PartnerList, error)
}

type partnerServiceClient struct {
	cc *grpc.ClientConn
}

func NewPartnerServiceClient(cc *grpc.ClientConn) PartnerServiceClient {
	return &partnerServiceClient{cc}
}

func (c *partnerServiceClient) AddPartner(ctx context.Context, in *Partner, opts ...grpc.CallOption) (*AddPartnerReply, error) {
	out := new(AddPartnerReply)
	err := c.cc.Invoke(ctx, "/proto.PartnerService/AddPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) GetPartners(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PartnerList, error) {
	out := new(PartnerList)
	err := c.cc.Invoke(ctx, "/proto.PartnerService/GetPartners", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *partnerServiceClient) SearchPartner(ctx context.Context, in *SearchRequest, opts ...grpc.CallOption) (*PartnerList, error) {
	out := new(PartnerList)
	err := c.cc.Invoke(ctx, "/proto.PartnerService/SearchPartner", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PartnerServiceServer is the server API for PartnerService service.
type PartnerServiceServer interface {
	AddPartner(context.Context, *Partner) (*AddPartnerReply, error)
	GetPartners(context.Context, *SearchRequest) (*PartnerList, error)
	SearchPartner(context.Context, *SearchRequest) (*PartnerList, error)
}

// UnimplementedPartnerServiceServer can be embedded to have forward compatible implementations.
type UnimplementedPartnerServiceServer struct {
}

func (*UnimplementedPartnerServiceServer) AddPartner(ctx context.Context, req *Partner) (*AddPartnerReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPartner not implemented")
}
func (*UnimplementedPartnerServiceServer) GetPartners(ctx context.Context, req *SearchRequest) (*PartnerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPartners not implemented")
}
func (*UnimplementedPartnerServiceServer) SearchPartner(ctx context.Context, req *SearchRequest) (*PartnerList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchPartner not implemented")
}

func RegisterPartnerServiceServer(s *grpc.Server, srv PartnerServiceServer) {
	s.RegisterService(&_PartnerService_serviceDesc, srv)
}

func _PartnerService_AddPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Partner)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).AddPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PartnerService/AddPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).AddPartner(ctx, req.(*Partner))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_GetPartners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).GetPartners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PartnerService/GetPartners",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).GetPartners(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PartnerService_SearchPartner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PartnerServiceServer).SearchPartner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.PartnerService/SearchPartner",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PartnerServiceServer).SearchPartner(ctx, req.(*SearchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _PartnerService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto.PartnerService",
	HandlerType: (*PartnerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddPartner",
			Handler:    _PartnerService_AddPartner_Handler,
		},
		{
			MethodName: "GetPartners",
			Handler:    _PartnerService_GetPartners_Handler,
		},
		{
			MethodName: "SearchPartner",
			Handler:    _PartnerService_SearchPartner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "example.proto",
}

func (m *Partner) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partner) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Partner) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sss != nil {
		{
			size, err := m.Sss.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintExample(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Phone) > 0 {
		for iNdEx := len(m.Phone) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Phone[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Email) > 0 {
		i -= len(m.Email)
		copy(dAtA[i:], m.Email)
		i = encodeVarintExample(dAtA, i, uint64(len(m.Email)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Id != 0 {
		i = encodeVarintExample(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintExample(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Partner_PhoneNumber) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Partner_PhoneNumber) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Partner_PhoneNumber) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintExample(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Number) > 0 {
		i -= len(m.Number)
		copy(dAtA[i:], m.Number)
		i = encodeVarintExample(dAtA, i, uint64(len(m.Number)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PartnerList) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PartnerList) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PartnerList) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Partners) > 0 {
		for iNdEx := len(m.Partners) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Partners[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintExample(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *AddPartnerReply) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AddPartnerReply) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AddPartnerReply) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = encodeVarintExample(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SearchRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SearchRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SearchRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.SearchString) > 0 {
		i -= len(m.SearchString)
		copy(dAtA[i:], m.SearchString)
		i = encodeVarintExample(dAtA, i, uint64(len(m.SearchString)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintExample(dAtA []byte, offset int, v uint64) int {
	offset -= sovExample(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Partner) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Id != 0 {
		n += 1 + sovExample(uint64(m.Id))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if len(m.Phone) > 0 {
		for _, e := range m.Phone {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	if m.Sss != nil {
		l = m.Sss.Size()
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *Partner_PhoneNumber) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Number)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovExample(uint64(m.Type))
	}
	return n
}

func (m *PartnerList) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Partners) > 0 {
		for _, e := range m.Partners {
			l = e.Size()
			n += 1 + l + sovExample(uint64(l))
		}
	}
	return n
}

func (m *AddPartnerReply) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func (m *SearchRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SearchString)
	if l > 0 {
		n += 1 + l + sovExample(uint64(l))
	}
	return n
}

func sovExample(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozExample(x uint64) (n int) {
	return sovExample(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Partner) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPhone := "[]*Partner_PhoneNumber{"
	for _, f := range this.Phone {
		repeatedStringForPhone += strings.Replace(fmt.Sprintf("%v", f), "Partner_PhoneNumber", "Partner_PhoneNumber", 1) + ","
	}
	repeatedStringForPhone += "}"
	s := strings.Join([]string{`&Partner{`,
		`Name:` + fmt.Sprintf("%v", this.Name) + `,`,
		`Id:` + fmt.Sprintf("%v", this.Id) + `,`,
		`Email:` + fmt.Sprintf("%v", this.Email) + `,`,
		`Phone:` + repeatedStringForPhone + `,`,
		`Sss:` + strings.Replace(fmt.Sprintf("%v", this.Sss), "Status", "rpc.Status", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Partner_PhoneNumber) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Partner_PhoneNumber{`,
		`Number:` + fmt.Sprintf("%v", this.Number) + `,`,
		`Type:` + fmt.Sprintf("%v", this.Type) + `,`,
		`}`,
	}, "")
	return s
}
func (this *PartnerList) String() string {
	if this == nil {
		return "nil"
	}
	repeatedStringForPartners := "[]*Partner{"
	for _, f := range this.Partners {
		repeatedStringForPartners += strings.Replace(f.String(), "Partner", "Partner", 1) + ","
	}
	repeatedStringForPartners += "}"
	s := strings.Join([]string{`&PartnerList{`,
		`Partners:` + repeatedStringForPartners + `,`,
		`}`,
	}, "")
	return s
}
func (this *AddPartnerReply) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&AddPartnerReply{`,
		`Message:` + fmt.Sprintf("%v", this.Message) + `,`,
		`}`,
	}, "")
	return s
}
func (this *SearchRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&SearchRequest{`,
		`SearchString:` + fmt.Sprintf("%v", this.SearchString) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringExample(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Partner) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Partner: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Partner: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Phone", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Phone = append(m.Phone, &Partner_PhoneNumber{})
			if err := m.Phone[len(m.Phone)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sss", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sss == nil {
				m.Sss = &rpc.Status{}
			}
			if err := m.Sss.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Partner_PhoneNumber) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PhoneNumber: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PhoneNumber: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Number", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Number = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Partner_PhoneType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PartnerList) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PartnerList: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PartnerList: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Partners", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Partners = append(m.Partners, &Partner{})
			if err := m.Partners[len(m.Partners)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AddPartnerReply) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AddPartnerReply: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AddPartnerReply: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SearchRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowExample
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SearchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SearchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SearchString", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowExample
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthExample
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthExample
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SearchString = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipExample(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthExample
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipExample(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowExample
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowExample
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthExample
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupExample
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthExample
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthExample        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowExample          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupExample = fmt.Errorf("proto: unexpected end of group")
)
